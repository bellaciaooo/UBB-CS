     1                                  bits 32 
     2                                  global start        
     3                                  extern exit               
     4                                  import exit msvcrt.dll    
     5                                  
     6                                  segment data use32 class=data
     7 00000000 07000000                    a dd 7
     8 00000004 01                          b db 1
     9 00000005 01                          c db 1
    10 00000006 0200000000000000            x dq 2
    11                                  
    12                                  segment code use32 class=code
    13                                      start:
    14                                          ; a-doubleword b,c-byte x-qword
    15                                          ;(a+b)/(2-b*b+b/c)-x Interpretarea fara semn
    16                                          ;(a+b)
    17 00000000 A1[00000000]                    mov eax, [a] ; EAX = a
    18 00000005 BB00000000                      mov ebx, 0 ; EBX = 0
    19 0000000A 8A1D[04000000]                  mov bl, [b] ; EBX = b
    20 00000010 01C3                            add ebx, eax ; EBX = a + b
    21                                          ;(2-b*b+b/c)
    22 00000012 A0[04000000]                    mov al, [b]
    23 00000017 F625[04000000]                  mul byte [b] ; AX = b * b
    24 0000001D BA02000000                      mov edx, 2
    25 00000022 6629C2                          sub dx, ax ; DX = 2 - b * b
    26 00000025 B400                            mov ah, 0
    27 00000027 A0[04000000]                    mov al, [b]
    28 0000002C F635[05000000]                  div byte [c] ; AL= b / c 
    29 00000032 B400                            mov ah, 0 ; scapam de restul din AH in caz ca e
    30 00000034 6601C2                          add dx, ax ; DX= 2 - b * b + b / c
    31                                          ;(a+b)/(2-b*b+b/c)
    32 00000037 89D8                            mov eax, ebx ; EAX = a + b
    33 00000039 89D1                            mov ecx, edx ; ECX = 2 - b * b + b / c
    34 0000003B BA00000000                      mov edx, 0
    35 00000040 F7F1                            div ecx ;EAX =(a+b)/(2-b*b+b/c)
    36                                          ;(a+b)/(2-b*b+b/c)-x
    37 00000042 BA00000000                      mov edx, 0
    38 00000047 8B1D[06000000]                  mov ebx, dword[x+0]
    39 0000004D 8B0D[0A000000]                  mov ecx, dword[x+4]
    40 00000053 29D8                            sub eax, ebx
    41 00000055 19CA                            sbb edx, ecx
    42 00000057 6A00                            push    dword 0      
    43 00000059 FF15[00000000]                  call    [exit]   
